{
    This file is part of the MWA Software Pascal API for OpenSSL .

    The MWA Software Pascal API for OpenSSL is free software: you can redistribute it
    and/or modify it under the terms of the Apache License Version 2.0 (the "License").

    You may not use this file except in compliance with the License.  You can obtain a copy
    in the file LICENSE.txt in the source distribution or at https://www.openssl.org/source/license.html.

    The MWA Software Pascal API for OpenSSL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the License for more details.

    This file includes software copied from the Indy (Internet Direct) project, and which is offered
    under the dual-licensing agreement described on the Indy website. (https://www.indyproject.org/license/)
    }


unit cast;

interface

// Headers for OpenSSL 1.1.1
// cast.h


uses
  OpenSSLAPI;

const
  CAST_ENCRYPT_CONST =  1;
  CAST_DECRYPT_CONST =  0;
  CAST_BLOCK =  8;
  CAST_KEY_LENGTH = 16;

type
  CAST_LONG = type TOpenSSL_C_UINT;
  PCAST_LONG = ^CAST_LONG;

  cast_key_st = record
    data: array of CAST_LONG;
    short_key: TOpenSSL_C_INT;              //* Use reduced rounds for short key */
  end;

  CAST_KEY = cast_key_st;
  PCAST_KEY = ^CAST_KEY;

  procedure CAST_set_key(key: PCast_Key; len: TOpenSSL_C_INT; const data: PByte);
  procedure CAST_ecb_encrypt(const in_: PByte; out_: PByte; const key: PCast_Key; enc: TOpenSSL_C_INT);
  procedure CAST_encrypt(data: PCAST_LONG; const key: PCast_Key);
  procedure CAST_decrypt(data: PCAST_LONG; const key: PCast_Key);
  procedure CAST_cbc_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_LONG; const ks: PCast_Key; iv: PByte; enc: TOpenSSL_C_INT);
  procedure CAST_cfb64_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_LONG; const schedule: PCast_Key; ivec: PByte; num: POpenSSL_C_INT; enc: TOpenSSL_C_INT);
  procedure CAST_ofb64_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_LONG; const schedule: PCast_Key; ivec: PByte; num: POpenSSL_C_INT);

implementation

end.
