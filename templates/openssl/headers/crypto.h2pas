{
    This file is part of the MWA Software Pascal API for OpenSSL .

    The MWA Software Pascal API for OpenSSL is free software: you can redistribute it
    and/or modify it under the terms of the Apache License Version 2.0 (the "License").

    You may not use this file except in compliance with the License.  You can obtain a copy
    in the file LICENSE.txt in the source distribution or at https://www.openssl.org/source/license.html.

    The MWA Software Pascal API for OpenSSL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the License for more details.

    This file includes software copied from the Indy (Internet Direct) project, and which is offered
    under the dual-licensing agreement described on the Indy website. (https://www.indyproject.org/license/)
    }


unit crypto;

interface

// Headers for OpenSSL 1.1.1
// crypto.h
{$J+}

uses
  OpenSSLAPI,
  bio,
  ossl_typ,
  evp,
  provider,
  {$IFDEF VCL_XE3_OR_ABOVE}System.Types{$ELSE}Types{$ENDIF};

{$MINENUMSIZE 4}

const
  CRYPTO_MEM_CHECK_OFF = $0;   //* Control only */
  CRYPTO_MEM_CHECK_ON = $1;   //* Control and mode bit */
  CRYPTO_MEM_CHECK_ENABLE = $2;   //* Control and mode bit */
  CRYPTO_MEM_CHECK_DISABLE = $3;   //* Control only */

  CRYPTO_EX_INDEX_SSL = 0;
  CRYPTO_EX_INDEX_SSL_CTX = 1;
  CRYPTO_EX_INDEX_SSL_SESSION = 2;
  CRYPTO_EX_INDEX_X509 = 3;
  CRYPTO_EX_INDEX_X509_STORE = 4;
  CRYPTO_EX_INDEX_X509_STORE_CTX = 5;
  CRYPTO_EX_INDEX_DH = 6;
  CRYPTO_EX_INDEX_DSA = 7;
  CRYPTO_EX_INDEX_EC_KEY = 8;
  CRYPTO_EX_INDEX_RSA = 9;
  CRYPTO_EX_INDEX_ENGINE = 10;
  CRYPTO_EX_INDEX_UI = 11;
  CRYPTO_EX_INDEX_BIO = 12;
  CRYPTO_EX_INDEX_APP = 13;
  CRYPTO_EX_INDEX_UI_METHOD = 14;
  CRYPTO_EX_INDEX_DRBG = 15;
  CRYPTO_EX_INDEX__COUNT = 16;
  
  // Added _CONST to prevent nameclashes
  OPENSSL_VERSION_CONST = 0;
  OPENSSL_CFLAGS = 1;
  OPENSSL_BUILT_ON = 2;
  OPENSSL_PLATFORM = 3;
  OPENSSL_DIR = 4;
  OPENSSL_ENGINES_DIR = 5;
  SSLEAY_VERSION_CONST = OPENSSL_VERSION_CONST;

  (*
   * These defines where used in combination with the old locking callbacks,
   * they are not called anymore, but old code that's not called might still
   * use them.
   *)
  CRYPTO_LOCK = 1;
  CRYPTO_UNLOCK = 2;
  CRYPTO_READ = 4;
  CRYPTO_WRITE = 8;

  (* Standard initialisation options *)
  OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = TOpenSSL_C_Long($00000001);
  OPENSSL_INIT_LOAD_CRYPTO_STRINGS = TOpenSSL_C_Long($00000002);
  OPENSSL_INIT_ADD_ALL_CIPHERS = TOpenSSL_C_Long($00000004);
  OPENSSL_INIT_ADD_ALL_DIGESTS = TOpenSSL_C_Long($00000008);
  OPENSSL_INIT_NO_ADD_ALL_CIPHERS = TOpenSSL_C_Long($00000010);
  OPENSSL_INIT_NO_ADD_ALL_DIGESTS = TOpenSSL_C_Long($00000020);
  OPENSSL_INIT_LOAD_CONFIG = TOpenSSL_C_Long($00000040);
  OPENSSL_INIT_NO_LOAD_CONFIG = TOpenSSL_C_Long($00000080);
  OPENSSL_INIT_ASYNC = TOpenSSL_C_Long($00000100);
  OPENSSL_INIT_ENGINE_RDRAND = TOpenSSL_C_Long($00000200);
  OPENSSL_INIT_ENGINE_DYNAMIC = TOpenSSL_C_Long($00000400);
  OPENSSL_INIT_ENGINE_OPENSSL = TOpenSSL_C_Long($00000800);
  OPENSSL_INIT_ENGINE_CRYPTODEV = TOpenSSL_C_Long($00001000);
  OPENSSL_INIT_ENGINE_CAPI = TOpenSSL_C_Long($00002000);
  OPENSSL_INIT_ENGINE_PADLOCK = TOpenSSL_C_Long($00004000);
  OPENSSL_INIT_ENGINE_AFALG = TOpenSSL_C_Long($00008000);
  (* OPENSSL_INIT_ZLIB = TOpenSSL_C_Long($00010000); *)
  OPENSSL_INIT_ATFORK = TOpenSSL_C_Long(00020000);
  (* OPENSSL_INIT_BASE_ONLY = TOpenSSL_C_Long(00040000); *)
  OPENSSL_INIT_NO_ATEXIT = TOpenSSL_C_Long(00080000);
  (* OPENSSL_INIT flag range 0xfff00000 reserved for OPENSSL_init_ssl() *)
  (* Max OPENSSL_INIT flag value is 0x80000000 *)

  (* openssl and dasync not counted as builtin *)
  OPENSSL_INIT_ENGINE_ALL_BUILTIN = OPENSSL_INIT_ENGINE_RDRAND
    or OPENSSL_INIT_ENGINE_DYNAMIC or OPENSSL_INIT_ENGINE_CRYPTODEV
    or OPENSSL_INIT_ENGINE_CAPI or OPENSSL_INIT_ENGINE_PADLOCK;

  CRYPTO_ONCE_STATIC_INIT = 0;

type
  CRYPTO_THREADID = record {1.0.x only}
    ptr : Pointer;
    val : TOpenSSL_C_ULONG;
  end;
  PCRYPTO_THREADID = ^CRYPTO_THREADID;
  CRYPTO_RWLOCK = type Pointer;
  PCRYPTO_RWLOCK = ^CRYPTO_RWLOCK;
  //crypto_ex_data_st = record
  //  sk: PStackOfVoid;
  //end;
  //DEFINE_STACK_OF(void)

  Tthreadid_func = procedure (id : PCRYPTO_THREADID) cdecl;    


  // CRYPTO_EX_new = procedure(parent: Pointer; ptr: Pointer; CRYPTO_EX_DATA *ad; idx: TOpenSSL_C_INT; argl: TOpenSSL_C_LONG; argp: Pointer);
  //  CRYPTO_EX_free = procedure(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
  //                             int idx, long argl, void *argp);
  //typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
  //                           void *from_d, int idx, long argl, void *argp);
  //__owur int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
  //                            CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,
  //                            CRYPTO_EX_free *free_func);

  CRYPTO_mem_leaks_cb_cb = function(const str: PAnsiChar; len: TOpenSSL_C_SIZET; u: Pointer): TOpenSSL_C_INT; cdecl;
  CRYPTO_THREAD_run_once_init = procedure; cdecl;

  CRYPTO_THREAD_LOCAL = type DWORD;
  PCRYPTO_THREAD_LOCAL = ^CRYPTO_THREAD_LOCAL;
  CRYPTO_THREAD_ID = type DWORD;
  CRYPTO_ONCE = type TOpenSSL_C_LONG;
  PCRYPTO_ONCE = ^CRYPTO_ONCE;

  CRYPTO_set_mem_functions_m = function(size: TOpenSSL_C_SIZET; const filename: PAnsiChar; linenumber: TOpenSSL_C_INT): Pointer; cdecl;
  CRYPTO_set_mem_functions_r = function(buffer: Pointer; size: TOpenSSL_C_SIZET; const filename: PAnsiChar; linenumber: TOpenSSL_C_INT): Pointer; cdecl;
  CRYPTO_set_mem_functions_f = procedure(buffer: Pointer; const filename: PAnsiChar; const linenumber: TOpenSSL_C_INT); cdecl;
  TIdSslIdCallback = function: TOpenSSL_C_ULONG; cdecl;
  TIdSslLockingCallback = procedure (mode, n : TOpenSSL_C_INT; Afile : PAnsiChar; line : TOpenSSL_C_INT); cdecl;

function OPENSSL_malloc(num: TOpenSSL_C_SIZET): Pointer; {removed 1.0.0}
function OPENSSL_zalloc(num: TOpenSSL_C_SIZET): Pointer; {removed 1.0.0}
function OPENSSL_realloc(addr: Pointer; num: TOpenSSL_C_SIZET): Pointer; {removed 1.0.0}
function OPENSSL_clear_realloc(addr: Pointer; old_num: TOpenSSL_C_SIZET; num: TOpenSSL_C_SIZET): Pointer; {removed 1.0.0}
procedure OPENSSL_clear_free(addr: Pointer; num: TOpenSSL_C_SIZET); {removed 1.0.0}
procedure OPENSSL_free(addr: Pointer); {removed 1.0.0}
function OPENSSL_memdup(const str: Pointer; s: TOpenSSL_C_SIZET): Pointer; {removed 1.0.0}
function OPENSSL_strdup(const str: PAnsiChar): PAnsiChar; {removed 1.0.0}
function OPENSSL_strndup(const str: PAnsiChar; n: TOpenSSL_C_SIZET): PAnsiChar; {removed 1.0.0}
function OPENSSL_secure_malloc(num: TOpenSSL_C_SIZET): Pointer; {removed 1.0.0}
function OPENSSL_secure_zalloc(num: TOpenSSL_C_SIZET): Pointer; {removed 1.0.0}
procedure OPENSSL_secure_free(addr: Pointer); {removed 1.0.0}
procedure OPENSSL_secure_clear_free(addr: Pointer; num: TOpenSSL_C_SIZET); {removed 1.0.0}
function OPENSSL_secure_actual_size(ptr: Pointer): TOpenSSL_C_SIZET; {removed 1.0.0}

  function CRYPTO_THREAD_lock_new: PCRYPTO_RWLOCK; {introduced 1.1.0}
  function CRYPTO_THREAD_read_lock(lock: PCRYPTO_RWLOCK): TOpenSSL_C_INT; {introduced 1.1.0}
  function CRYPTO_THREAD_write_lock(lock: PCRYPTO_RWLOCK): TOpenSSL_C_INT; {introduced 1.1.0}
  function CRYPTO_THREAD_unlock(lock: PCRYPTO_RWLOCK): TOpenSSL_C_INT; {introduced 1.1.0}
  procedure CRYPTO_THREAD_lock_free(lock: PCRYPTO_RWLOCK); {introduced 1.1.0}

  function CRYPTO_atomic_add(val: POpenSSL_C_INT; amount: TOpenSSL_C_INT; ret: POpenSSL_C_INT; lock: PCRYPTO_RWLOCK): TOpenSSL_C_INT; {introduced 1.1.0}

  function CRYPTO_mem_ctrl(mode: TOpenSSL_C_INT): TOpenSSL_C_INT; {removed 3.0.0}

  function OPENSSL_strlcpy(dst: PAnsiChar; const src: PAnsiChar; siz: TOpenSSL_C_SIZET): TOpenSSL_C_SIZET; {introduced 1.1.0}
  function OPENSSL_strlcat(dst: PAnsiChar; const src: PAnsiChar; siz: TOpenSSL_C_SIZET): TOpenSSL_C_SIZET; {introduced 1.1.0}
  function OPENSSL_strnlen(const str: PAnsiChar; maxlen: TOpenSSL_C_SIZET): TOpenSSL_C_SIZET; {introduced 1.1.0}
  function OPENSSL_buf2hexstr(const buffer: PByte; len: TOpenSSL_C_LONG): PAnsiChar; {introduced 1.1.0}
  function OPENSSL_hexstr2buf(const str: PAnsiChar; len: POpenSSL_C_LONG): PByte; {introduced 1.1.0}
  function OPENSSL_hexchar2int(c: Byte): TOpenSSL_C_INT; {introduced 1.1.0}

  // # define OPENSSL_MALLOC_MAX_NELEMS(type)  (((1U<<(sizeof(int)*8-1))-1)/sizeof(type))

  function OpenSSL_version_num: TOpenSSL_C_ULONG; {introduced 1.1.0}
  function OpenSSL_version(type_: TOpenSSL_C_INT): PAnsiChar; {introduced 1.1.0}

  function OPENSSL_issetugid: TOpenSSL_C_INT;

  (* No longer use an index. *)
  //function CRYPTO_free_ex_index(class_index: TOpenSSL_C_INT; idx: TOpenSSL_C_INT): TOpenSSL_C_INT;

  (*
   * Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a
   * given class (invokes whatever per-class callbacks are applicable)
   *)
  function CRYPTO_new_ex_data(class_index: TOpenSSL_C_INT; obj: Pointer; ad: PCRYPTO_EX_DATA): TOpenSSL_C_INT;
  function CRYPTO_dup_ex_data(class_index: TOpenSSL_C_INT; to_: PCRYPTO_EX_DATA; const from: PCRYPTO_EX_DATA): TOpenSSL_C_INT;

  procedure CRYPTO_free_ex_data(class_index: TOpenSSL_C_INT; obj: Pointer; ad: PCRYPTO_EX_DATA);

  (*
   * Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular
   * index (relative to the class type involved)
   *)
  function CRYPTO_set_ex_data(ad: PCRYPTO_EX_DATA; idx: TOpenSSL_C_INT; val: Pointer): TOpenSSL_C_INT;
  function CRYPTO_get_ex_data(const ad: PCRYPTO_EX_DATA; idx: TOpenSSL_C_INT): Pointer;

  ///*
  // * The old locking functions have been removed completely without compatibility
  // * macros. This is because the old functions either could not properly report
  // * errors, or the returned error values were not clearly documented.
  // * Replacing the locking functions with no-ops would cause race condition
  // * issues in the affected applications. It is far better for them to fail at
  // * compile time.
  // * On the other hand, the locking callbacks are no longer used.  Consequently,
  // * the callback management functions can be safely replaced with no-op macros.
  // */
  //#  define CRYPTO_num_locks()            (1)
  function CRYPTO_num_locks: TOpenSSL_C_INT; {removed 1.1.0}
  //#  define CRYPTO_set_locking_callback(func)
  //#  define CRYPTO_get_locking_callback()         (NULL)
  //#  define CRYPTO_set_add_lock_callback(func)
  //#  define CRYPTO_get_add_lock_callback()        (NULL)
  procedure CRYPTO_set_locking_callback(func: TIdSslLockingCallback); {removed 1.1.0}

  ///* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
  //#  define CRYPTO_THREADID_set_numeric(id, val)
  procedure CRYPTO_THREADID_set_numeric(id : PCRYPTO_THREADID; val: TOpenSSL_C_ULONG); {removed 1.1.0}
  //#  define CRYPTO_THREADID_set_pointer(id, ptr)
  //#  define CRYPTO_THREADID_set_callback(threadid_func)   (0)
  procedure CRYPTO_THREADID_set_callback(threadid_func: Tthreadid_func); {removed 1.1.0}
  //#  define CRYPTO_THREADID_get_callback()                (NULL)
  //#  define CRYPTO_THREADID_current(id)
  //#  define CRYPTO_THREADID_cmp(a, b)                     (-1)
  //#  define CRYPTO_THREADID_cpy(dest, src)
  //#  define CRYPTO_THREADID_hash(id)                      (0UL)

  procedure CRYPTO_set_id_callback(func: TIdSslIdCallback); {removed 1.1.0}
  //
  //#  define CRYPTO_set_dynlock_create_callback(dyn_create_function)
  //#  define CRYPTO_set_dynlock_lock_callback(dyn_lock_function)
  //#  define CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function)
  //#  define CRYPTO_get_dynlock_create_callback()          (NULL)
  //#  define CRYPTO_get_dynlock_lock_callback()            (NULL)
  //#  define CRYPTO_get_dynlock_destroy_callback()         (NULL)
  //# endif /* OPENSSL_API_COMPAT < 0x10100000L */

  function CRYPTO_set_mem_functions(m: CRYPTO_set_mem_functions_m; r: CRYPTO_set_mem_functions_r; f: CRYPTO_set_mem_functions_f): TOpenSSL_C_INT;
  function CRYPTO_set_mem_debug(flag: TOpenSSL_C_INT): TOpenSSL_C_INT; {introduced 1.1.0 removed 3.0.0}
    //void CRYPTO_get_mem_functions(
  //        void *(**m) (TOpenSSL_C_SIZET, const char *, int),
  //        void *(**r) (void *, TOpenSSL_C_SIZET, const char *, int),
  //        void (**f) (void *, const char *, int));

  function CRYPTO_malloc(num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): Pointer;
  function CRYPTO_zalloc(num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): Pointer; {introduced 1.1.0}
  function CRYPTO_memdup(const str: Pointer; siz: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): Pointer; {introduced 1.1.0}
  function CRYPTO_strdup(const str: PAnsiChar; const file_: PAnsiChar; line: TOpenSSL_C_INT): PAnsiChar;
  function CRYPTO_strndup(const str: PAnsiChar; s: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): PAnsiChar; {introduced 1.1.0}
  procedure CRYPTO_free(ptr: Pointer; const file_: PAnsiChar; line: TOpenSSL_C_INT);
  procedure CRYPTO_clear_free(ptr: Pointer; num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT); {introduced 1.1.0}
  function CRYPTO_realloc(addr: Pointer; num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): Pointer;
  function CRYPTO_clear_realloc(addr: Pointer; old_num: TOpenSSL_C_SIZET; num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): Pointer; {introduced 1.1.0}

  function CRYPTO_secure_malloc_init(sz: TOpenSSL_C_SIZET; minsize: TOpenSSL_C_INT): TOpenSSL_C_INT; {introduced 1.1.0}
  function CRYPTO_secure_malloc_done: TOpenSSL_C_INT; {introduced 1.1.0}
  function CRYPTO_secure_malloc(num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): Pointer; {introduced 1.1.0}
  function CRYPTO_secure_zalloc(num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT): Pointer; {introduced 1.1.0}
  procedure CRYPTO_secure_free(ptr: Pointer; const file_: PAnsiChar; line: TOpenSSL_C_INT); {introduced 1.1.0}
  procedure CRYPTO_secure_clear_free(ptr: Pointer; num: TOpenSSL_C_SIZET; const file_: PAnsiChar; line: TOpenSSL_C_INT); {introduced 1.1.0}
  function CRYPTO_secure_allocated(const ptr: Pointer): TOpenSSL_C_INT; {introduced 1.1.0}
  function CRYPTO_secure_malloc_initialized: TOpenSSL_C_INT; {introduced 1.1.0}
  function CRYPTO_secure_actual_size(ptr: Pointer): TOpenSSL_C_SIZET; {introduced 1.1.0}
  function CRYPTO_secure_used: TOpenSSL_C_SIZET; {introduced 1.1.0}

  procedure OPENSSL_cleanse(ptr: Pointer; len: TOpenSSL_C_SIZET);

  (* debug libraries only  *)
//  function CRYPTO_mem_debug_push(const info: PAnsiChar; const file_: PAnsiChar; line: TOpenSSL_C_INT): TOpenSSL_C_INT;
//  function CRYPTO_mem_debug_pop: TOpenSSL_C_INT;
//  procedure CRYPTO_get_alloc_counts(mcount: POpenSSL_C_INT; rcount: POpenSSL_C_INT; fcount: POpenSSL_C_INT);

  (*
   * Debugging functions (enabled by CRYPTO_set_mem_debug(1))
   * The flag argument has the following significance:
   *   0:   called before the actual memory allocation has taken place
   *   1:   called after the actual memory allocation has taken place
   *)

//  procedure CRYPTO_mem_debug_malloc(addr: Pointer; num: TOpenSSL_C_SIZET; flag: TOpenSSL_C_INT; const file_: PAnsiChar; line: TOpenSSL_C_INT);
//  procedure CRYPTO_mem_debug_realloc(addr1: Pointer; addr2: Pointer; num: TOpenSSL_C_SIZET; flag: TOpenSSL_C_INT; const file_: PAnsiChar; line: TOpenSSL_C_INT);
//  procedure CRYPTO_mem_debug_free(addr: Pointer; flag: TOpenSSL_C_INT; const file_: PAnsiChar; line: TOpenSSL_C_INT);

//  function CRYPTO_mem_leaks_cb(cb: CRYPTO_mem_leaks_cb_cb; u: Pointer): TOpenSSL_C_INT;

//  function CRYPTO_mem_leaks_fp(&FILE: Pointer): TOpenSSL_C_INT;
//  function CRYPTO_mem_leaks(BIO: PBIO): TOpenSSL_C_INT;

  //* die if we have to */
  //ossl_noreturn void OPENSSL_die(const char *assertion, const char *file, int line);

  //# define OPENSSL_assert(e) \
  //    (void)((e) ? 0 : (OPENSSL_die("assertion failed: " #e, OPENSSL_FILE, OPENSSL_LINE), 1))

  function OPENSSL_isservice: TOpenSSL_C_INT;

  function FIPS_mode: TOpenSSL_C_INT; {removed 3.0.0}
  function FIPS_mode_set(r: TOpenSSL_C_INT): TOpenSSL_C_INT; {removed 3.0.0}

  procedure OPENSSL_init;

  // struct tm *OPENSSL_gmtime(const TOpenSSL_C_TIMET *timer, struct tm *result);

  //function OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec): TOpenSSL_C_INT;
  //function OPENSSL_gmtime_diff(int *pday, int *psec, const struct tm *from, const struct tm *to): TOpenSSL_C_INT;

  (*
   * CRYPTO_memcmp returns zero iff the |len| bytes at |a| and |b| are equal.
   * It takes an amount of time dependent on |len|, but independent of the
   * contents of |a| and |b|. Unlike memcmp, it cannot be used to put elements
   * into a defined order as the return value when a != b is undefined, other
   * than to be non-zero.
   *)
  function CRYPTO_memcmp(const in_a: Pointer; const in_b: Pointer; len: TOpenSSL_C_SIZET): TOpenSSL_C_INT;

  (* Library initialisation functions *)
  procedure OPENSSL_cleanup; {introduced 1.1.0}
  function OPENSSL_init_crypto(opts: TOpenSSL_C_UINT64; const settings: POPENSSL_INIT_SETTINGS): TOpenSSL_C_INT; {introduced 1.1.0}
  // int OPENSSL_atexit(void (*handler)(void));
  procedure OPENSSL_thread_stop; {introduced 1.1.0}

  (* Low-level control of initialization *)
  function OPENSSL_INIT_new: POPENSSL_INIT_SETTINGS; {introduced 1.1.0}
  //int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
  //                                     const char *config_filename);
  //void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
  //                                        unsigned long flags);
  //int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
  //                                    const char *config_appname);
  procedure OPENSSL_INIT_free(settings: POPENSSL_INIT_SETTINGS); {introduced 1.1.0}

  function CRYPTO_THREAD_run_once(once: PCRYPTO_ONCE; init: CRYPTO_THREAD_run_once_init): TOpenSSL_C_INT; {introduced 1.1.0}

  //type
  //  CRYPTO_THREAD_init_local_cleanup = procedure(v1: Pointer);
  //
  //function CRYPTO_THREAD_init_local(key: PCRYPTO_THREAD_LOCAL; cleanup: CRYPTO_THREAD_init_local_cleanup): TOpenSSL_C_INT;
  function CRYPTO_THREAD_get_local(key: PCRYPTO_THREAD_LOCAL): Pointer; {introduced 1.1.0}
  function CRYPTO_THREAD_set_local(key: PCRYPTO_THREAD_LOCAL; val: Pointer): TOpenSSL_C_INT; {introduced 1.1.0}
  function CRYPTO_THREAD_cleanup_local(key: PCRYPTO_THREAD_LOCAL): TOpenSSL_C_INT; {introduced 1.1.0}

  function CRYPTO_THREAD_get_current_id: CRYPTO_THREAD_ID; {introduced 1.1.0}
  function CRYPTO_THREAD_compare_id(a: CRYPTO_THREAD_ID; b: CRYPTO_THREAD_ID): TOpenSSL_C_INT; {introduced 1.1.0}

  function SSLeay_version(type_ : TOpenSSL_C_INT) : PAnsiChar; {removed 1.1.0}
  function SSLeay: TOpenSSL_C_ULONG; {removed 1.1.0}

{passthrough}
procedure SetLegacyCallbacks;
procedure RemoveLegacyCallbacks;
{/passthrough}

implementation

uses SyncObjs,  Sysutils
     {$IFNDEF FPC}, Windows{$ENDIF};

// OPENSSL_FILE = __FILE__ = C preprocessor macro
// OPENSSL_LINE = __LINE__ = C preprocessor macro
// FPC hase an equivalent with {$I %FILE%} and {$I %LINENUM%}, see https://www.freepascal.org/docs-html/prog/progsu41.html#x47-460001.1.41
// Delphi has nothing :(

//# define OPENSSL_malloc(num) CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_malloc(num: TOpenSSL_C_SIZET): Pointer;
begin
  Result := CRYPTO_malloc(num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_zalloc(num) CRYPTO_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_zalloc(num: TOpenSSL_C_SIZET): Pointer;
begin
  Result := CRYPTO_zalloc(num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_realloc(addr, num) CRYPTO_realloc(addr, num, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_realloc(addr: Pointer; num: TOpenSSL_C_SIZET): Pointer;
begin
  Result := CRYPTO_realloc(addr, num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_clear_realloc(addr, old_num, num) CRYPTO_clear_realloc(addr, old_num, num, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_clear_realloc(addr: Pointer; old_num: TOpenSSL_C_SIZET; num: TOpenSSL_C_SIZET): Pointer;
begin
  Result := CRYPTO_clear_realloc(addr, old_num, num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_clear_free(addr, num) CRYPTO_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)
procedure OPENSSL_clear_free(addr: Pointer; num: TOpenSSL_C_SIZET);
begin
  CRYPTO_clear_free(addr, num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_free(addr) CRYPTO_free(addr, OPENSSL_FILE, OPENSSL_LINE)
procedure OPENSSL_free(addr: Pointer);
begin
  CRYPTO_free(addr, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_memdup(str, s) CRYPTO_memdup((str), s, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_memdup(const str: Pointer; s: TOpenSSL_C_SIZET): Pointer;
begin
  Result := CRYPTO_memdup(str, s, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_strdup(str) CRYPTO_strdup(str, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_strdup(const str: PAnsiChar): PAnsiChar;
begin
  Result := CRYPTO_strdup(str, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_strndup(str, n) CRYPTO_strndup(str, n, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_strndup(const str: PAnsiChar; n: TOpenSSL_C_SIZET): PAnsiChar;
begin
  Result := CRYPTO_strndup(str, n, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_secure_malloc(num) CRYPTO_secure_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_secure_malloc(num: TOpenSSL_C_SIZET): Pointer;
begin
  Result := CRYPTO_secure_malloc(num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_secure_zalloc(num) CRYPTO_secure_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)
function OPENSSL_secure_zalloc(num: TOpenSSL_C_SIZET): Pointer;
begin
  Result := CRYPTO_secure_zalloc(num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_secure_free(addr) CRYPTO_secure_free(addr, OPENSSL_FILE, OPENSSL_LINE)
procedure OPENSSL_secure_free(addr: Pointer);
begin
  CRYPTO_secure_free(addr, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_secure_clear_free(addr, num) CRYPTO_secure_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)
procedure OPENSSL_secure_clear_free(addr: Pointer; num: TOpenSSL_C_SIZET);
begin
  CRYPTO_secure_clear_free(addr, num, {$IFNDEF FPC}''{$ELSE}{$I %FILE%}{$ENDIF}, {$IFNDEF FPC}-1{$ELSE}{$I %LINENUM%}{$ENDIF});
end;

//# define OPENSSL_secure_actual_size(ptr) CRYPTO_secure_actual_size(ptr)
function OPENSSL_secure_actual_size(ptr: Pointer): TOpenSSL_C_SIZET;
begin
  Result := CRYPTO_secure_actual_size(ptr);
end;

function OpenSSL_version(type_ : TOpenSSL_C_INT) : PAnsiChar;
begin
  Result := SSLeay_version(type_);
end;

function OpenSSL_version_num: TOpenSSL_C_ULONG;
begin
  Result := SSLeay;
end;

function FIPS_mode: TOpenSSL_C_INT;
begin
  Result := OSSL_PROVIDER_available(nil,PAnsiChar(AnsiString('fips')));
end;

var fips_provider: POSSL_PROVIDER;
    base_provider: POSSL_PROVIDER;

function FIPS_mode_set(r: TOpenSSL_C_INT): TOpenSSL_C_INT;
begin
  if r = 0 then
  begin
    if base_provider <> nil then
    begin
      OSSL_PROVIDER_unload(base_provider);
      base_provider := nil;
    end;

    if fips_provider <> nil then
    begin
       OSSL_PROVIDER_unload(fips_provider);
       fips_provider := nil;
    end;
    Result := 1;
  end
  else
  begin
     Result := 0;
     fips_provider := OSSL_PROVIDER_load(nil, PAnsiChar(AnsiString('fips')));
     if fips_provider = nil then
       Exit;
     base_provider := OSSL_PROVIDER_load(nil, PAnsiChar(AnsiString('base')));
     if base_provider = nil then
     begin
       OSSL_PROVIDER_unload(fips_provider);
       fips_provider := nil;
       Exit;
     end;
     Result := 1;
  end;
end;


function OPENSSL_init_crypto(opts: TOpenSSL_C_UINT64; const settings: POPENSSL_INIT_SETTINGS): TOpenSSL_C_INT;
var OpenSSL_add_all_ciphers: procedure; cdecl;
    OpenSSL_add_all_digests: procedure; cdecl;
begin
  Result := 0;
  if opts and OPENSSL_INIT_ADD_ALL_CIPHERS <> 0 then
  begin
    OpenSSL_add_all_ciphers := LoadLibCryptoFunction('OpenSSL_add_all_ciphers');
    if not assigned(OpenSSL_add_all_ciphers) then
      EOpenSSLAPIFunctionNotPresent.RaiseException('OpenSSL_add_all_ciphers');
    OpenSSL_add_all_ciphers;
  end;
  if opts and OPENSSL_INIT_ADD_ALL_DIGESTS <> 0 then
  begin
    OpenSSL_add_all_digests := LoadLibCryptoFunction('OpenSSL_add_all_digests');
    if not assigned(OpenSSL_add_all_digests) then
      EOpenSSLAPIFunctionNotPresent.RaiseException('OpenSSL_add_all_digests');
    OpenSSL_add_all_digests;
  end;
  Result := 1;
end;

procedure OPENSSL_cleanup;
begin
 {nothing to do}
end;

{passthrough}
{$IFNDEF OPENSSL_NO_LEGACY_SUPPORT}
{$if declared(CRYPTO_num_locks)}
type

  { TOpenSSLLegacyCallbacks }

  TOpenSSLLegacyCallbacks = class(TThreadList)
  private
    procedure PrepareOpenSSLLocking;
    class var FCallbackList: TOpenSSLLegacyCallbacks;
  public
    constructor Create;
    destructor Destroy; override;
  end;

procedure TOpenSSLLegacyCallbacks.PrepareOpenSSLLocking;
var
  i: integer;
  Lock: TCriticalSection;
begin
  LockList;
  try
    for i := 0 to CRYPTO_num_locks - 1 do
    begin
      Lock := TCriticalSection.Create;
      try
        Add(Lock);
      except
        Lock.Free;
        raise;
      end;
    end;
  finally
    UnlockList;
  end;
end;

procedure OpenSSLSetCurrentThreadID(id : PCRYPTO_THREADID); cdecl;
begin
  CRYPTO_THREADID_set_numeric(id, TOpenSSL_C_ULONG(GetCurrentThreadId));
end;

procedure OpenSSLLockingCallback(mode, n: TOpenSSL_C_INT; Afile: PAnsiChar;
  line: TOpenSSL_C_INT); cdecl;
var
  Lock: TCriticalSection;
  LList: TList;
begin
  Assert(TOpenSSLLegacyCallbacks.FCallbackList <> nil);
  Lock := nil;

  LList := TOpenSSLLegacyCallbacks.FCallbackList.LockList;
  try
    if n < LList.Count then
      Lock := TCriticalSection(LList[n]);
  finally
    TOpenSSLLegacyCallbacks.FCallbackList.UnlockList;
  end;
  Assert(Lock <> nil);
  if (mode and CRYPTO_LOCK) = CRYPTO_LOCK then
    Lock.Acquire
  else
    Lock.Release;
end;

constructor TOpenSSLLegacyCallbacks.Create;
begin
  Assert(FCallbackList = nil);
  inherited Create;
  FCallbackList := self;
  PrepareOpenSSLLocking;
  CRYPTO_set_locking_callback(@OpenSSLLockingCallback);
  CRYPTO_THREADID_set_callback(@OpenSSLSetCurrentThreadID);
end;

destructor TOpenSSLLegacyCallbacks.Destroy;
var i: integer;
    LList: TList;
begin
  CRYPTO_set_locking_callback(nil);
  LList := LockList;

  try
    for i := 0 to LList.Count - 1 do
      TCriticalSection(LList[i]).Free;
    Clear;
  finally
    UnlockList;
  end;
  inherited Destroy;
  FCallbackList := nil;
end;
{$IFEND}
{$ENDIF}


procedure SetLegacyCallbacks;
begin
  {$IFNDEF OPENSSL_NO_LEGACY_SUPPORT}
  {$if declared(CRYPTO_num_locks)}
  if TOpenSSLLegacyCallbacks.FCallbackList = nil then
    TOpenSSLLegacyCallbacks.Create;
  {$ifend}
  {$ENDIF}
end;

procedure RemoveLegacyCallbacks;
begin
  {$IFNDEF OPENSSL_NO_LEGACY_SUPPORT}
  {$if declared(CRYPTO_num_locks)}
  if TOpenSSLLegacyCallbacks.FCallbackList <> nil then
    FreeAndNil(TOpenSSLLegacyCallbacks.FCallbackList);
    {$ifend}
  {$ENDIF}
end;
{/passthrough}

Initialization
  {$if declared(CRYPTO_num_locks)}
  TOpenSSLLegacyCallbacks.FCallbackList := nil;
  {$ifend}

Finalization
  RemoveLegacyCallbacks;

end.
