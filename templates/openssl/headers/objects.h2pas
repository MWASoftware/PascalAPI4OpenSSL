{
    This file is part of the MWA Software Pascal API for OpenSSL .

    The MWA Software Pascal API for OpenSSL is free software: you can redistribute it
    and/or modify it under the terms of the Apache License Version 2.0 (the "License").

    You may not use this file except in compliance with the License.  You can obtain a copy
    in the file LICENSE.txt in the source distribution or at https://www.openssl.org/source/license.html.

    The MWA Software Pascal API for OpenSSL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the License for more details.

    This file includes software copied from the Indy (Internet Direct) project, and which is offered
    under the dual-licensing agreement described on the Indy website. (https://www.indyproject.org/license/)
    }


unit objects;

interface

// Headers for OpenSSL 1.1.1
// objects.h


uses
  OpenSSLAPI,
  ossl_typ;

type
  obj_name_st = record
    type_: TOpenSSL_C_INT;
    alias: TOpenSSL_C_INT;
    name: PAnsiChar;
    data: PAnsiChar;
  end;
  OBJ_NAME = obj_name_st;
  POBJ_NAME = ^OBJ_NAME;

//# define         OBJ_create_and_add_object(a,b,c) OBJ_create(a,b,c)

  function OBJ_NAME_init: TOpenSSL_C_INT;
  //TOpenSSL_C_INT OBJ_NAME_new_index(TOpenSSL_C_ULONG (*hash_func) (const PAnsiChar *);
  //                       TOpenSSL_C_INT (*cmp_func) (const PAnsiChar *; const PAnsiChar *);
  //                       void (*free_func) (const PAnsiChar *; TOpenSSL_C_INT; const PAnsiChar *));
  function OBJ_NAME_get(const name: PAnsiChar; type_: TOpenSSL_C_INT): PAnsiChar;
  function OBJ_NAME_add(const name: PAnsiChar; type_: TOpenSSL_C_INT; const data: PAnsiChar): TOpenSSL_C_INT;
  function OBJ_NAME_remove(const name: PAnsiChar; type_: TOpenSSL_C_INT): TOpenSSL_C_INT;
  procedure OBJ_NAME_cleanup(type_: TOpenSSL_C_INT);
//  void OBJ_NAME_do_all(TOpenSSL_C_INT type_; void (*fn) (const OBJ_NAME *; void *arg);
//                       void *arg);
//  void OBJ_NAME_do_all_sorted(TOpenSSL_C_INT type_;
//                              void (*fn) (const OBJ_NAME *; void *arg);
//                              void *arg);

  function OBJ_dup(const o: PASN1_OBJECT): PASN1_OBJECT;
  function OBJ_nid2obj(n: TOpenSSL_C_INT): PASN1_OBJECT;
  function OBJ_nid2ln(n: TOpenSSL_C_INT): PAnsiChar;
  function OBJ_nid2sn(n: TOpenSSL_C_INT): PAnsiChar;
  function OBJ_obj2nid(const o: PASN1_OBJECT): TOpenSSL_C_INT;
  function OBJ_txt2obj(const s: PAnsiChar; no_name: TOpenSSL_C_INT): PASN1_OBJECT;
  function OBJ_obj2txt(buf: PAnsiChar; buf_len: TOpenSSL_C_INT; const a: PASN1_OBJECT; no_name: TOpenSSL_C_INT): TOpenSSL_C_INT;
  function OBJ_txt2nid(const s: PAnsiChar): TOpenSSL_C_INT;
  function OBJ_ln2nid(const s: PAnsiChar): TOpenSSL_C_INT;
  function OBJ_sn2nid(const s: PAnsiChar): TOpenSSL_C_INT;
  function OBJ_cmp(const a: PASN1_OBJECT; const b: PASN1_OBJECT): TOpenSSL_C_INT;
//  const void *OBJ_bsearch_(const void *key; const void *base; TOpenSSL_C_INT num; TOpenSSL_C_INT size;
//                           TOpenSSL_C_INT (*cmp) (const void *; const void *));
//  const void *OBJ_bsearch_ex_(const void *key; const void *base; TOpenSSL_C_INT num;
//                              TOpenSSL_C_INT size;
//                              TOpenSSL_C_INT (*cmp) (const void *; const void *);
//                              TOpenSSL_C_INT flags);

  //# define _DECLARE_OBJ_BSEARCH_CMP_FN(scope; type1; type2; nm)    \
  //  static TOpenSSL_C_INT nm##_cmp_BSEARCH_CMP_FN(const void *; const void *); \
  //  static TOpenSSL_C_INT nm##_cmp(type1 const *; type2 const *); \
  //  scope type2 * OBJ_bsearch_##nm(type1 *key; type2 const *base; TOpenSSL_C_INT num)
  //
  //# define DECLARE_OBJ_BSEARCH_CMP_FN(type1; type2; cmp)   \
  //  _DECLARE_OBJ_BSEARCH_CMP_FN(static; type1; type2; cmp)
  //# define DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN(type1; type2; nm)     \
  //  type2 * OBJ_bsearch_##nm(type1 *key; type2 const *base; TOpenSSL_C_INT num)

  (*
   * Unsolved problem: if a type is actually a pointer type, like
   * nid_triple is, then its impossible to get a const where you need
   * it. Consider:
   *
   * typedef TOpenSSL_C_INT nid_triple[3];
   * const void *a_;
   * const nid_triple const *a = a_;
   *
   * The assignment discards a const because what you really want is:
   *
   * const TOpenSSL_C_INT const * const *a = a_;
   *
   * But if you do that, you lose the fact that a is an array of 3 ints,
   * which breaks comparison functions.
   *
   * Thus we end up having to cast, sadly, or unpack the
   * declarations. Or, as I finally did in this case, declare nid_triple
   * to be a struct, which it should have been in the first place.
   *
   * Ben, August 2008.
   *
   * Also, strictly speaking not all types need be const, but handling
   * the non-constness means a lot of complication, and in practice
   * comparison routines do always not touch their arguments.
   *)

  //# define IMPLEMENT_OBJ_BSEARCH_CMP_FN(type1, type2, nm)  \
  //  static TOpenSSL_C_INT nm##_cmp_BSEARCH_CMP_FN(const void *a_; const void *b_)    \
  //      { \
  //      type1 const *a = a_; \
  //      type2 const *b = b_; \
  //      return nm##_cmp(a;b); \
  //      } \
  //  static type2 *OBJ_bsearch_##nm(type1 *key; type2 const *base; TOpenSSL_C_INT num) \
  //      { \
  //      return (type2 *)OBJ_bsearch_(key; base; num; sizeof(type2); \
  //                                        nm##_cmp_BSEARCH_CMP_FN); \
  //      } \
  //      extern void dummy_prototype(void)
  //
  //# define IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN(type1; type2; nm)   \
  //  static TOpenSSL_C_INT nm##_cmp_BSEARCH_CMP_FN(const void *a_; const void *b_)    \
  //      { \
  //      type1 const *a = a_; \
  //      type2 const *b = b_; \
  //      return nm##_cmp(a;b); \
  //      } \
  //  type2 *OBJ_bsearch_##nm(type1 *key; type2 const *base; TOpenSSL_C_INT num) \
  //      { \
  //      return (type2 *)OBJ_bsearch_(key; base; num; sizeof(type2); \
  //                                        nm##_cmp_BSEARCH_CMP_FN); \
  //      } \
  //      extern void dummy_prototype(void)
  //
  //# define OBJ_bsearch(type1;key;type2;base;num;cmp)                              \
  //  ((type2 *)OBJ_bsearch_(CHECKED_PTR_OF(type1;key);CHECKED_PTR_OF(type2;base); \
  //                         num;sizeof(type2);                             \
  //                         ((void)CHECKED_PTR_OF(type1;cmp##_type_1);     \
  //                          (void)CHECKED_PTR_OF(type2;cmp##_type_2);     \
  //                          cmp##_BSEARCH_CMP_FN)))
  //
  //# define OBJ_bsearch_ex(type1;key;type2;base;num;cmp;flags)                      \
  //  ((type2 *)OBJ_bsearch_ex_(CHECKED_PTR_OF(type1;key);CHECKED_PTR_OF(type2;base); \
  //                         num;sizeof(type2);                             \
  //                         ((void)CHECKED_PTR_OF(type1;cmp##_type_1);     \
  //                          (void)type_2=CHECKED_PTR_OF(type2;cmp##_type_2); \
  //                          cmp##_BSEARCH_CMP_FN));flags)

  function OBJ_new_nid(num: TOpenSSL_C_INT): TOpenSSL_C_INT;
  function OBJ_add_object(const obj: PASN1_OBJECT): TOpenSSL_C_INT;
  function OBJ_create(const oid: PAnsiChar; const sn: PAnsiChar; const ln: PAnsiChar): TOpenSSL_C_INT;
  function OBJ_create_objects(in_: PBIO): TOpenSSL_C_INT;

  function OBJ_length(const obj: PASN1_OBJECT): TOpenSSL_C_SIZET; {introduced 1.1.0}
  function OBJ_get0_data(const obj: PASN1_OBJECT): PByte; {introduced 1.1.0}

  function OBJ_find_sigid_algs(signid: TOpenSSL_C_INT; pdig_nid: POpenSSL_C_INT; ppkey_nid: POpenSSL_C_INT): TOpenSSL_C_INT;
  function OBJ_find_sigid_by_algs(psignid: POpenSSL_C_INT; dig_nid: TOpenSSL_C_INT; pkey_nid: TOpenSSL_C_INT): TOpenSSL_C_INT;
  function OBJ_add_sigid(signid: TOpenSSL_C_INT; dig_id: TOpenSSL_C_INT; pkey_id: TOpenSSL_C_INT): TOpenSSL_C_INT;
  procedure OBJ_sigid_free;

implementation

end.
