{
    This file is part of the MWA Software Pascal API for OpenSSL .

    The MWA Software Pascal API for OpenSSL is free software: you can redistribute it
    and/or modify it under the terms of the Apache License Version 2.0 (the "License").

    You may not use this file except in compliance with the License.  You can obtain a copy
    in the file LICENSE.txt in the source distribution or at https://www.openssl.org/source/license.html.

    The MWA Software Pascal API for OpenSSL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the License for more details.

    This file includes software copied from the Indy (Internet Direct) project, and which is offered
    under the dual-licensing agreement described on the Indy website. (https://www.indyproject.org/license/)
    }


unit hmac;

interface

// Headers for OpenSSL 1.1.1
// hmac.h


uses
  OpenSSLAPI,
  ossl_typ,
  evp;

  procedure HMAC_CTX_init(ctx : PHMAC_CTX); {removed 1.1.0}
  function HMAC_size(const e: PHMAC_CTX): TOpenSSL_C_SIZET; {introduced 1.1.0}
  function HMAC_CTX_new: PHMAC_CTX; {introduced 1.1.0}
  function HMAC_CTX_reset(ctx: PHMAC_CTX): TOpenSSL_C_INT; {introduced 1.1.0}
  procedure HMAC_CTX_cleanup(ctx : PHMAC_CTX); {removed 1.1.0}
  procedure HMAC_CTX_free(ctx: PHMAC_CTX); {introduced 1.1.0}

  function HMAC_Init_ex(ctx: PHMAC_CTX; const key: Pointer; len: TOpenSSL_C_INT; const md: PEVP_MD; impl: PENGINE): TOpenSSL_C_INT;
  function HMAC_Update(ctx: PHMAC_CTX; const data: PByte; len: TOpenSSL_C_SIZET): TOpenSSL_C_INT;
  function HMAC_Final(ctx: PHMAC_CTX; md: PByte; len: PByte): TOpenSSL_C_INT;
  function HMAC(const evp_md: PEVP_MD; const key: Pointer; key_len: TOpenSSL_C_INT; const d: PByte; n: TOpenSSL_C_SIZET; md: PByte; md_len: POpenSSL_C_INT): PByte;
  function HMAC_CTX_copy(dctx: PHMAC_CTX; sctx: PHMAC_CTX): TOpenSSL_C_INT;

  procedure HMAC_CTX_set_flags(ctx: PHMAC_CTX; flags: TOpenSSL_C_ULONG);
  function HMAC_CTX_get_md(const ctx: PHMAC_CTX): PEVP_MD; {introduced 1.1.0}

implementation


function HMAC_CTX_new: PHMAC_CTX;
begin
  Result := AllocMem(SizeOf(HMAC_CTX));
  HMAC_CTX_init(Result);
end;

procedure HMAC_CTX_free(ctx: PHMAC_CTX);
begin
  HMAC_CTX_cleanup(ctx);
  FreeMem(ctx,SizeOf(HMAC_CTX));
end;

(*
typedef struct hmac_ctx_st {
    const EVP_MD *md;
    EVP_MD_CTX md_ctx;
    EVP_MD_CTX i_ctx;
    EVP_MD_CTX o_ctx;
    unsigned int key_length;
    unsigned char key[HMAC_MAX_MD_CBLOCK];
} HMAC_CTX;
*)

const
  HMAC_MAX_MD_CBLOCK = 128; {largest known is SHA512}

type
 _PHMAC_CTX = ^HMAC_CTX;
 HMAC_CTX = record
   md: EVP_MD;
   md_ctx: EVP_MD_CTX;
   i_ctx: EVP_MD_CTX;
   o_ctx: EVP_MD_CTX;
   key_length: TOpenSSL_C_UINT;
   key: array [0..HMAC_MAX_MD_CBLOCK] of char;
 end;


function HMAC_size(const e: PHMAC_CTX): TOpenSSL_C_SIZET;
var EVP_MD_size: function (const md: PEVP_MD): TOpenSSL_C_INT; cdecl;
begin
  EVP_MD_size := LoadLibCryptoFunction('EVP_MD_size');
  if not assigned(EVP_MD_size) then
    EOpenSSLAPIFunctionNotPresent.RaiseException('EVP_MD_size');
  Result := EVP_MD_size(_PHMAC_CTX(e)^.md);
end;




end.
