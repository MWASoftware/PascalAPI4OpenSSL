{
    This file is part of the MWA Software Pascal API for OpenSSL .

    The MWA Software Pascal API for OpenSSL is free software: you can redistribute it
    and/or modify it under the terms of the Apache License Version 2.0 (the "License").

    You may not use this file except in compliance with the License.  You can obtain a copy
    in the file LICENSE.txt in the source distribution or at https://www.openssl.org/source/license.html.

    The MWA Software Pascal API for OpenSSL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the License for more details.

    This file includes software copied from the Indy (Internet Direct) project, and which is offered
    under the dual-licensing agreement described on the Indy website. (https://www.indyproject.org/license/)
    }


unit err;

interface

// Headers for OpenSSL 1.1.1
// err.h


uses
  OpenSSLAPI,
  ossl_typ;

const
  ERR_TXT_MALLOCED = $01;
  ERR_TXT_STRING = $02;
  ERR_FLAG_MARK = $01;
  ERR_FLAG_CLEAR = $02;

  ERR_NUM_ERRORS = 16;

//* library */
  ERR_LIB_SYS =    2;
  ERR_LIB_BN =    3;
  ERR_LIB_RSA =    4;
  ERR_LIB_DH =    5;
  ERR_LIB_EVP =    6;
  ERR_LIB_BUF =    7;
  ERR_LIB_OBJ =    8;
  ERR_LIB_PEM =    9;
  ERR_LIB_DSA =    10;
  ERR_LIB_X509 =    11;
  // ERR_LIB_METH         12
  ERR_LIB_ASN1 =    13;
  ERR_LIB_CONF =    14;
  ERR_LIB_CRYPTO =   15;
  ERR_LIB_EC =    16;
  ERR_LIB_SSL =    20;
(* #define ERR_LIB_SSL23        21 *)
(* #define ERR_LIB_SSL2         22 *)
(* #define ERR_LIB_SSL3         23 *)
(* #define ERR_LIB_RSAREF       30 *)
(* #define ERR_LIB_PROXY        31 *)
  ERR_LIB_BIO =    32;
  ERR_LIB_PKCS7 =    33;
  ERR_LIB_X509V3 =   34;
  ERR_LIB_PKCS12 =   35;
  ERR_LIB_RAND =    36;
  ERR_LIB_DSO =    37;
  ERR_LIB_ENGINE =   38;
  ERR_LIB_OCSP =    39;
  ERR_LIB_UI =    40;
  ERR_LIB_COMP =    41;
  ERR_LIB_ECDSA =    42;
  ERR_LIB_ECDH =    43;
  ERR_LIB_OSSL_STORE =  44;
  ERR_LIB_FIPS =    45;
  ERR_LIB_CMS =    46;
  ERR_LIB_TS =    47;
  ERR_LIB_HMAC =    48;
(* # define ERR_LIB_JPAKE       49 *)
  ERR_LIB_CT =    50;
  ERR_LIB_ASYNC =    51;
  ERR_LIB_KDF =    52;
  ERR_LIB_SM2 =    53;
  ERR_LIB_USER =    128;
  
//* OS functions */
  SYS_F_FOPEN = 1;
  SYS_F_CONNECT = 2;
  SYS_F_GETSERVBYNAME = 3;
  SYS_F_SOCKET = 4;
  SYS_F_IOCTLSOCKET = 5;
  SYS_F_BIND = 6;
  SYS_F_LISTEN = 7;
  SYS_F_ACCEPT = 8;
  SYS_F_WSASTARTUP = 9; (* Winsock stuff *)
  SYS_F_OPENDIR = 10;
  SYS_F_FREAD = 11;
  SYS_F_GETADDRINFO = 12;
  SYS_F_GETNAMEINFO = 13;
  SYS_F_SETSOCKOPT = 14;
  SYS_F_GETSOCKOPT = 15;
  SYS_F_GETSOCKNAME = 16;
  SYS_F_GETHOSTBYNAME = 17;
  SYS_F_FFLUSH = 18;
  SYS_F_OPEN = 19;
  SYS_F_CLOSE = 20;
  SYS_F_IOCTL = 21;
  SYS_F_STAT = 22;
  SYS_F_FCNTL = 23;
  SYS_F_FSTAT = 24;

//* reasons */
  ERR_R_SYS_LIB = ERR_LIB_SYS; //2
  ERR_R_BN_LIB = ERR_LIB_BN; //3
  ERR_R_RSA_LIB = ERR_LIB_RSA; //4
  ERR_R_DH_LIB = ERR_LIB_DH; //5
  ERR_R_EVP_LIB = ERR_LIB_EVP; //6
  ERR_R_BUF_LIB = ERR_LIB_BUF; //7
  ERR_R_OBJ_LIB = ERR_LIB_OBJ; //8
  ERR_R_PEM_LIB = ERR_LIB_PEM; //9
  ERR_R_DSA_LIB = ERR_LIB_DSA; //10
  ERR_R_X509_LIB = ERR_LIB_X509; //11
  ERR_R_ASN1_LIB = ERR_LIB_ASN1; //13
  ERR_R_EC_LIB = ERR_LIB_EC; //16
  ERR_R_BIO_LIB = ERR_LIB_BIO; //32
  ERR_R_PKCS7_LIB = ERR_LIB_PKCS7; //33
  ERR_R_X509V3_LIB = ERR_LIB_X509V3; //34
  ERR_R_ENGINE_LIB = ERR_LIB_ENGINE; //38
  ERR_R_UI_LIB = ERR_LIB_UI; //40
  ERR_R_ECDSA_LIB = ERR_LIB_ECDSA; //42
  ERR_R_OSSL_STORE_LIB = ERR_LIB_OSSL_STORE; //44

  ERR_R_NESTED_ASN1_ERROR =  58;
  ERR_R_MISSING_ASN1_EOS =  63;

  //* fatal error */
  ERR_R_FATAL =  64;
  ERR_R_MALLOC_FAILURE = (1 or ERR_R_FATAL);
  ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = (2 or ERR_R_FATAL);
  ERR_R_PASSED_NULL_PARAMETER = (3 or ERR_R_FATAL);
  ERR_R_INTERNAL_ERROR = (4 or ERR_R_FATAL);
  ERR_R_DISABLED = (5 or ERR_R_FATAL);
  ERR_R_INIT_FAIL = (6 or ERR_R_FATAL);
  ERR_R_PASSED_INVALID_ARGUMENT = (7);
  ERR_R_OPERATION_FAIL = (8 or ERR_R_FATAL);
  ERR_R_PKCS12_LIB = ERR_LIB_PKCS12;


(*
 * 99 is the maximum possible ERR_R_... code, higher values are reserved for
 * the individual libraries
 *)

type
  err_state_st = record
    err_flags: array[0..ERR_NUM_ERRORS -1] of TOpenSSL_C_INT;
    err_buffer: array[0..ERR_NUM_ERRORS -1] of TOpenSSL_C_ULONG;
    err_data: array[0..ERR_NUM_ERRORS -1] of PAnsiChar;
    err_data_flags: array[0..ERR_NUM_ERRORS -1] of TOpenSSL_C_INT;
    err_file: array[0..ERR_NUM_ERRORS -1] of PAnsiChar;
    err_line: array[0..ERR_NUM_ERRORS -1] of TOpenSSL_C_INT;
    top, bottom: TOpenSSL_C_INT;
  end;
  ERR_STATE = err_state_st;
  PERR_STATE = ^ERR_STATE;

  ERR_string_data_st = record
    error: TOpenSSL_C_ULONG;
    string_: PAnsiChar;
  end;
  ERR_STRING_DATA = ERR_string_data_st;
  PERR_STRING_DATA = ^ERR_STRING_DATA;

  ERR_print_errors_cb_cb = function(str: PAnsiChar; len: TOpenSSL_C_SIZET; u: Pointer): TOpenSSL_C_INT; cdecl;

// DEFINE_LHASH_OF(ERR_STRING_DATA);

  procedure ERR_put_error(lib: TOpenSSL_C_INT; func: TOpenSSL_C_INT; reason: TOpenSSL_C_INT; file_: PAnsiChar; line: TOpenSSL_C_INT); {removed 3.0.0}

{ From 3.0 onwards, replaced by a macro
  define ERR_put_error(lib, func, reason, file, line)
    (ERR_new(),
     ERR_set_debug((file), (line), OPENSSL_FUNC),
     ERR_set_error((lib), (reason), NULL))}

  procedure ERR_new; {introduced 3.0.0}
  procedure ERR_set_debug(const file_: PAnsiChar; line: integer; const func: PAnsiChar);  {introduced 3.0.0}
  procedure ERR_set_error(lib: integer; reason: integer; fmt: PAnsiChar); varargs; {introduced 3.0.0}


  procedure ERR_set_error_data(data: PAnsiChar; flags: TOpenSSL_C_INT);
  
  function ERR_get_error: TOpenSSL_C_ULONG;
  function ERR_get_error_line(file_: PPAnsiChar; line: POpenSSL_C_INT): TOpenSSL_C_ULONG;
  function ERR_get_error_line_data(file_: PPAnsiChar; line: POpenSSL_C_INT; data: PPAnsiChar; flags: POpenSSL_C_INT): TOpenSSL_C_ULONG;

  function ERR_peek_error: TOpenSSL_C_ULONG;
  function ERR_peek_error_line(file_: PPAnsiChar; line: POpenSSL_C_INT): TOpenSSL_C_ULONG;
  function ERR_peek_error_line_data(file_: PPAnsiChar; line: POpenSSL_C_INT; data: PPAnsiChar; flags: POpenSSL_C_INT): TOpenSSL_C_ULONG;

  function ERR_peek_last_error: TOpenSSL_C_ULONG;
  function ERR_peek_last_error_line(file_: PPAnsiChar; line: POpenSSL_C_INT): TOpenSSL_C_ULONG;
  function ERR_peek_last_error_line_data(file_: PPAnsiChar; line: POpenSSL_C_INT; data: PPAnsiChar; flags: POpenSSL_C_INT): TOpenSSL_C_ULONG;

  procedure ERR_clear_error;
  function ERR_error_string(e: TOpenSSL_C_ULONG; buf: PAnsiChar): PAnsiChar;
  procedure ERR_error_string_n(e: TOpenSSL_C_ULONG; buf: PAnsiChar; len: TOpenSSL_C_SIZET);
  function ERR_lib_error_string(e: TOpenSSL_C_ULONG): PAnsiChar;
  function ERR_func_error_string(e: TOpenSSL_C_ULONG): PAnsiChar;
  function ERR_reason_error_string(e: TOpenSSL_C_ULONG): PAnsiChar;
  procedure ERR_print_errors_cb(cb: ERR_print_errors_cb_cb; u: Pointer);

  procedure ERR_print_errors(bp: PBIO);
  // void ERR_add_error_data(int num, ...);
  // procedure ERR_add_error_vdata(num: TOpenSSL_C_INT; args: va_list);
  function ERR_load_strings(lib: TOpenSSL_C_INT; str: PERR_STRING_DATA): TOpenSSL_C_INT;
  function ERR_load_strings_const(str: PERR_STRING_DATA): TOpenSSL_C_INT; {introduced 1.1.0}
  function ERR_unload_strings(lib: TOpenSSL_C_INT; str: PERR_STRING_DATA): TOpenSSL_C_INT;
  function ERR_load_ERR_strings: TOpenSSL_C_INT;

  function ERR_get_state: PERR_STATE;
  function ERR_get_next_error_library: TOpenSSL_C_INT;
  function ERR_set_mark: TOpenSSL_C_INT;
  function ERR_pop_to_mark: TOpenSSL_C_INT;
  function ERR_clear_last_mark: TOpenSSL_C_INT; {introduced 1.1.0}

  procedure SSLErr(func: TOpenSSL_C_INT; reason: TOpenSSL_C_INT); {removed 1.0.0}
  procedure X509err(const f,r : TOpenSSL_C_INT); {removed 1.0.0}
  function ERR_GET_REASON(const l : TOpenSSL_C_INT) : TOpenSSL_C_INT; {removed 1.0.0}

{passthrough}
function ERR_GET_LIB(l: TOpenSSL_C_INT): TOpenSSL_C_ULONG;
procedure SSLError(func: TOpenSSL_C_INT; reason: TOpenSSL_C_INT);
{/passthrough}

implementation

procedure ERR_put_error(lib: TOpenSSL_C_INT; func: TOpenSSL_C_INT; reason: TOpenSSL_C_INT; file_: PAnsiChar; line: TOpenSSL_C_INT);
{ From 3.0 onwards, replaced by a macro
  define ERR_put_error(lib, func, reason, file, line)
    (ERR_new(),
     ERR_set_debug((file), (line), ''),
     ERR_set_error((lib), (reason), ''))}
begin
  ERR_new;
  ERR_set_debug(file_,line, '');
  ERR_set_error(lib,reason,'');
end;

procedure X509err(const f,r : TOpenSSL_C_INT);
begin
  ERR_PUT_error(ERR_LIB_X509,f,r,nil,0);
end;

function ERR_GET_REASON(const l : TOpenSSL_C_INT) : TOpenSSL_C_INT;
begin
  Result := l and $fff;
end;

{passthrough}
function ERR_GET_LIB(l: TOpenSSL_C_INT): TOpenSSL_C_ULONG;
begin
  Result := (l shr 24) and $ff;
end;

{SSLError is based on SSLErr which is no longer present in OpenSSL from 1.0.0 onwards}
procedure SSLError(func: TOpenSSL_C_INT; reason: TOpenSSL_C_INT);
begin
  if GetIOpenSSL.GetOpenSSLVersion < ERR_put_error_removed then
    ERR_put_error(ERR_LIB_SSL,func,reason,'',0)
  else
  begin
    ERR_new;
    ERR_set_debug('',0, '');
    ERR_set_error(ERR_LIB_SSL,reason,'');
  end;
end;

{/passthrough}

end.
