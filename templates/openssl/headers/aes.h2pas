{
    This file is part of the MWA Software Pascal API for OpenSSL .

    The MWA Software Pascal API for OpenSSL is free software: you can redistribute it
    and/or modify it under the terms of the Apache License Version 2.0 (the "License").

    You may not use this file except in compliance with the License.  You can obtain a copy
    in the file LICENSE.txt in the source distribution or at https://www.openssl.org/source/license.html.

    The MWA Software Pascal API for OpenSSL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the License for more details.

    This file includes software copied from the Indy (Internet Direct) project, and which is offered
    under the dual-licensing agreement described on the Indy website. (https://www.indyproject.org/license/)
    }


unit aes;

interface

// Headers for OpenSSL 1.1.1
// aes.h


uses
  OpenSSLAPI;

const
// Added '_CONST' to avoid name clashes
  AES_ENCRYPT_CONST = 1;
// Added '_CONST' to avoid name clashes
  AES_DECRYPT_CONST = 0;
  AES_MAXNR = 14;
  AES_BLOCK_SIZE = 16;

type
  aes_key_st = record
  // in old IdSSLOpenSSLHeaders.pas it was also TOpenSSL_C_UINT ¯\_(ツ)_/¯
//    {$IFDEF AES_LONG}
//    rd_key: array[0..(4 * (AES_MAXNR + 1))] of TOpenSSL_C_ULONG;
//    {$ELSE}
    rd_key: array[0..(4 * (AES_MAXNR + 1))] of TOpenSSL_C_UINT;
//    {$ENDIF}
    rounds: TOpenSSL_C_INT;
  end;
  AES_KEY = aes_key_st;
  PAES_KEY = ^AES_KEY;

  function AES_options: PAnsiChar;

  function AES_set_encrypt_key(const userKey: PByte; const bits: TOpenSSL_C_INT; const key: PAES_KEY): TOpenSSL_C_INT;
  function AES_set_decrypt_key(const userKey: PByte; const bits: TOpenSSL_C_INT; const key: PAES_KEY): TOpenSSL_C_INT;

  procedure AES_encrypt(const in_: PByte; out_: PByte; const key: PAES_KEY);
  procedure AES_decrypt(const in_: PByte; out_: PByte; const key: PAES_KEY);

  procedure AES_ecb_encrypt(const in_: PByte; out_: PByte; const key: PAES_KEY; const enc: TOpenSSL_C_INT);
  procedure AES_cbc_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_SIZET; const key: PAES_KEY; ivec: PByte; const enc: TOpenSSL_C_INT);
  procedure AES_cfb128_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_SIZET; const key: PAES_KEY; ivec: PByte; num: POpenSSL_C_INT; const enc: TOpenSSL_C_INT);
  procedure AES_cfb1_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_SIZET; const key: PAES_KEY; ivec: PByte; num: POpenSSL_C_INT; const enc: TOpenSSL_C_INT);
  procedure AES_cfb8_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_SIZET; const key: PAES_KEY; ivec: PByte; num: POpenSSL_C_INT; const enc: TOpenSSL_C_INT);
  procedure AES_ofb128_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_SIZET; const key: PAES_KEY; ivec: PByte; num: POpenSSL_C_INT);
  (* NB: the IV is _two_ blocks long *)
  procedure AES_ige_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_SIZET; const key: PAES_KEY; ivec: PByte; const enc: TOpenSSL_C_INT);
  (* NB: the IV is _four_ blocks long *)
  procedure AES_bi_ige_encrypt(const in_: PByte; out_: PByte; length: TOpenSSL_C_SIZET; const key: PAES_KEY; const key2: PAES_KEY; ivec: PByte; const enc: TOpenSSL_C_INT);

  function AES_wrap_key(key: PAES_KEY; const iv: PByte; out_: PByte; const in_: PByte; inlen: TOpenSSL_C_UINT): TOpenSSL_C_INT;
  function AES_unwrap_key(key: PAES_KEY; const iv: PByte; out_: PByte; const in_: PByte; inlen: TOpenSSL_C_UINT): TOpenSSL_C_INT;

implementation

end.
